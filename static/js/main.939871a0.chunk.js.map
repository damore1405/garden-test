{"version":3,"sources":["Navbar/Navigation.tsx","Form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","dropdownMenu","icon","text","className","Classes","DARK","align","Alignment","LEFT","minimal","href","RIGHT","content","position","Position","BOTTOM","rightIcon","React","SavedSearches","name","value","disabled","SavedSearchSelect","Select","ofType","ScheduleIntervalSelect","filterSavedSearch","query","savedSearch","toLowerCase","indexOf","renderSavedSearch","handleClick","modifiers","matchesPredicate","active","key","onClick","FormGroupExample","state","ticketStatus","savedSearchFilters","assignmentType","distributionType","isSetSchedule","isRecurring","scheduleFrequency","scheduleInterval","handleNameChange","console","log","handleTicketStatusChange","event","currentTarget","setState","handleAssignmentTypeChange","handleDistributionTypeChange","handleAddSavedSearchFilter","search","prevState","handleRemoveSavedSearchFilter","filter","s","handleCreateSearch","handleIsSetScheduleChange","handleScheduleStartDateChange","date","handleIsRecurringChange","handleScheduleIntervalChange","interval","handleScheduleFrequencyChange","frequency","getSavedSearchFilters","savedSearches","filterValues","map","forEach","includes","getScheduleFrequencyMax","max","label","labelFor","labelInfo","id","placeholder","large","onChange","this","selectedValue","inline","status","classes","items","itemPredicate","itemRenderer","noResults","onItemSelect","length","onRemove","checked","timePrecision","TimePrecision","MINUTE","formatDate","toLocaleString","parseDate","str","Date","minDate","timePickerProps","useAmPm","min","onValueChange","clampValueOnBlur","buttonPosition","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.939871a0.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  Alignment,\n  AnchorButton,\n  Classes,\n  Navbar,\n  NavbarGroup,\n  NavbarHeading,\n  NavbarDivider, Button, Menu, MenuItem, Popover, Position\n} from \"@blueprintjs/core\";\n\nexport interface NavigationProps {}\n\nexport class Navigation extends React.PureComponent<NavigationProps> {\n  public render() {\n    const dropdownMenu = (\n      <Menu>\n          <MenuItem icon=\"graph\" text=\"Graph\" />\n          <MenuItem icon=\"graph\" text=\"Graph\" />\n          <MenuItem icon=\"graph\" text=\"Graph\" />\n          <MenuItem icon=\"graph\" text=\"Graph\" />\n          <MenuItem icon=\"graph\" text=\"Graph\" />\n      </Menu>\n    );\n\n    return (\n      <Navbar className={Classes.DARK}>\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>MaestroQA</NavbarHeading>\n          <NavbarDivider />\n            <AnchorButton minimal={true} href=\"#\">Home</AnchorButton>\n            <AnchorButton minimal={true} href=\"#\">Reporting</AnchorButton>\n            <AnchorButton minimal={true} href=\"#\">Coaching</AnchorButton>\n            <AnchorButton minimal={true} href=\"#\">Tickets</AnchorButton>\n            <AnchorButton minimal={true} href=\"#\">Ticket Reviews</AnchorButton>\n            <AnchorButton minimal={true} href=\"#\">Exports</AnchorButton>\n        </NavbarGroup>\n        <NavbarGroup align={Alignment.RIGHT}>\n          <AnchorButton minimal={true} href=\"#\">Notifications</AnchorButton>\n          <AnchorButton minimal={true} href=\"#\">What's New</AnchorButton>\n          <AnchorButton minimal={true} href=\"#\">Help</AnchorButton>\n          <Popover content={dropdownMenu} position={Position.BOTTOM} minimal={true}>\n            <Button rightIcon=\"settings\" text=\"Suzanmsucro\" minimal={true} />\n          </Popover>\n        </NavbarGroup>\n      </Navbar>\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  FormGroup,\n  H1,\n  H2,\n  H3,\n  InputGroup,\n  Divider,\n  Radio,\n  RadioGroup,\n  Button,\n  MenuItem,\n  ControlGroup,\n  Checkbox,\n  NumericInput,\n  Tag\n} from \"@blueprintjs/core\";\n\nimport { Select, ItemRenderer, ItemPredicate } from \"@blueprintjs/select\";\nimport { DateInput, TimePrecision } from \"@blueprintjs/datetime\";\n\nimport \"./Form.css\";\n\nexport interface FormGroupExampleState {\n  ticketStatus: string;\n  savedSearchFilters: SavedSearch[];\n  assignmentType: string;\n  distributionType: string;\n  isSetSchedule: boolean;\n  isRecurring: boolean;\n  scheduleFrequency: number;\n  scheduleInterval: string;\n}\n\ninterface SavedSearch {\n  name: string;\n  value: string;\n  disabled?: boolean;\n}\nconst SavedSearches = {\n  items: [\n    { name: \"Great Search I saved\", value: \"1\", disabled: false },\n    { name: \"Tickets I Love\", value: \"12\", disabled: false },\n    { name: \"Find What I want!\", value: \"123\", disabled: false },\n    { name: \"Rude Dude\", value: \"1234\", disabled: false },\n    { name: \"Do people give their dogs middle names?\", value: \"12345\", disabled: false },\n    { name: \"Finneus Maximus\", value: \"123456\", disabled: false },\n    { name: \"Tickets I don't Love\", value: \"1234567\", disabled: false },\n  ]\n};\nconst SavedSearchSelect = Select.ofType<SavedSearch>();\n\ninterface ScheduleInterval {\n  name: string;\n  value: \"day\" | \"week\" | \"month\";\n}\nconst ScheduleIntervalSelect = Select.ofType<ScheduleInterval>();\n\nconst filterSavedSearch: ItemPredicate<SavedSearch> = (query, savedSearch) => {\n  return savedSearch.name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n};\n\nconst renderSavedSearch: ItemRenderer<SavedSearch> = (\n  savedSearch,\n  { handleClick, modifiers }\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  return (\n    <MenuItem\n      active={modifiers.active}\n      key={savedSearch.value}\n      onClick={handleClick}\n      text={savedSearch.name}\n      disabled={savedSearch.disabled}\n    />\n  );\n};\n\nexport class FormGroupExample extends React.PureComponent<\n  {},\n  FormGroupExampleState\n> {\n  public state: FormGroupExampleState = {\n    ticketStatus: \"all\",\n    savedSearchFilters: [],\n    assignmentType: \"random\",\n    distributionType: \"even\",\n    isSetSchedule: false,\n    isRecurring: false,\n    scheduleFrequency: null,\n    scheduleInterval: null\n  };\n\n  // form event handlers\n  handleNameChange = () => {\n    console.log('i changed my name');\n  }\n  handleTicketStatusChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const ticketStatus = event.currentTarget.value;\n    this.setState({ ticketStatus });\n  };\n  handleAssignmentTypeChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const assignmentType = event.currentTarget.value;\n    this.setState({ assignmentType });\n  };\n  handleDistributionTypeChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const distributionType = event.currentTarget.value;\n    this.setState({ distributionType });\n  };\n  handleAddSavedSearchFilter = (search: SavedSearch) => {\n    this.setState(prevState => {\n      const { savedSearchFilters } = prevState;\n      return { savedSearchFilters: [...savedSearchFilters, search] };\n    });\n  };\n  handleRemoveSavedSearchFilter = (search: SavedSearch) => {\n    const { savedSearchFilters } = this.state;\n    this.setState({\n      savedSearchFilters: savedSearchFilters.filter(\n        s => s.value !== search.value\n      )\n    });\n  };\n  handleCreateSearch = () => {\n    console.log(\"create saved search\");\n  };\n  handleIsSetScheduleChange = () => {\n    const isSetSchedule = !this.state.isSetSchedule;\n    this.setState({ isSetSchedule });\n  };\n  handleScheduleStartDateChange = (date: Date) => {\n    console.log(date);\n  };\n  handleIsRecurringChange = () => {\n    const isRecurring = !this.state.isRecurring;\n    this.setState({ isRecurring });\n  };\n  handleScheduleIntervalChange = (interval: string) => {\n    this.setState({ scheduleInterval: interval });\n  };\n  handleScheduleFrequencyChange = (frequency: number) => {\n    this.setState({ scheduleFrequency: frequency });\n  };\n\n  getSavedSearchFilters = () => {\n    const savedSearches = SavedSearches.items;\n    const { savedSearchFilters } = this.state;\n    const filterValues = savedSearchFilters.map(s => s.value);\n      savedSearches.forEach(search => {\n        if (filterValues.includes(search.value)) {\n          search.disabled = true;\n        } else {\n          search.disabled = false;\n        }\n      });\n    \n    return savedSearches;\n  };\n\n  getScheduleFrequencyMax = () => {\n    const { scheduleInterval } = this.state;\n    let max = 1;\n    switch (scheduleInterval) {\n      case \"day\":\n        max = 364;\n        break;\n      case \"week\":\n        max = 52;\n        break;\n      case \"month\":\n        max = 12;\n        break;\n    }\n    return max;\n  };\n\n  public render() {\n    return (\n      <div>\n        <form>\n          <H1 className=\"form-header\">Send Grading Assignments</H1>\n          <div className=\"form-section\">\n            <H2>Describe the Automation</H2>\n            <FormGroup\n              label=\"Automation Name\"\n              labelFor=\"text-input\"\n              labelInfo={\"*\"}\n            >\n              <InputGroup\n                id=\"text-input\"\n                placeholder=\"Name this automation\"\n                large={true}\n              />\n            </FormGroup>\n          </div>\n          <Divider />\n          <div className=\"form-section\">\n            <H2>Choose Tickets</H2>\n            <div className=\"form-subsection\">\n              <H3>Find Tickets</H3>\n              <RadioGroup\n                label=\"Ticket Status\"\n                onChange={this.handleTicketStatusChange}\n                selectedValue={this.state.ticketStatus}\n                inline={true}\n                className=\"radio-chips\"\n              >\n                {[\"all\", \"graded\", \"created\", \"updated\", \"solved\"].map(\n                  status => {\n                    const checked = status === this.state.ticketStatus;\n                    const classes = checked\n                      ? \"radio-chip checked\"\n                      : \"radio-chip\";\n                    return (\n                      <Radio\n                        key={status}\n                        label={status}\n                        value={status}\n                        className={classes}\n                      />\n                    );\n                  }\n                )}\n              </RadioGroup>\n            </div>\n            <div className=\"form-subsection\">\n              <H3>Refine Ticket Results</H3>\n              <ControlGroup>\n                <SavedSearchSelect\n                  items={this.getSavedSearchFilters()}\n                  itemPredicate={filterSavedSearch}\n                  itemRenderer={renderSavedSearch}\n                  noResults={<MenuItem disabled={true} text=\"No results.\" />}\n                  onItemSelect={this.handleAddSavedSearchFilter}\n                  className=\"bp3-large\"\n                >\n                  <Button\n                    text={\"Select saved searches\"}\n                    rightIcon=\"double-caret-vertical\"\n                    minimal={true}\n                    className={\"dropdown-select-btn\"}\n                  />\n                </SavedSearchSelect>\n                <span className=\"spacer-text\">or</span>\n                <Button icon=\"add\" onClick={this.handleCreateSearch} className=\"bkg-lightgrey\" minimal={true} large={true}>\n                  Create a new search\n                </Button>\n              </ControlGroup>\n              {this.state.savedSearchFilters.length > 0 && (\n              <div className=\"multi-tag-container\">\n                {this.state.savedSearchFilters.map(search => {\n                  return (\n                    <Tag\n                      key={search.value}\n                      onRemove={() => {\n                        this.handleRemoveSavedSearchFilter(search);\n                      }}\n                      large={true}\n                      minimal={true}\n                    >\n                      {search.name}\n                    </Tag>\n                  );\n                })}\n              </div>\n              )}\n            </div>\n          </div>\n          <Divider />\n          <div className=\"form-section\">\n            <H2>Choose Tickets</H2>\n            <div className=\"form-subsection\">\n              <H3>Assign Tickets</H3>\n              <RadioGroup\n                label=\"Assignment Type\"\n                onChange={this.handleAssignmentTypeChange}\n                selectedValue={this.state.assignmentType}\n                inline={true}\n                className={\"radio-chips\"}\n              >\n                {[\"manual\", \"random\"].map(assignmentType => {\n                  const checked = assignmentType === this.state.assignmentType;\n                  const classes = checked ? \"radio-chip checked\" : \"radio-chip\";\n                  return (\n                    <Radio\n                      key={assignmentType}\n                      label={assignmentType}\n                      value={assignmentType}\n                      className={classes}\n                    />\n                  );\n                })}\n              </RadioGroup>\n            </div>\n            <div className=\"form-subsection\">\n              <RadioGroup\n                label=\"Distribution Type\"\n                onChange={this.handleDistributionTypeChange}\n                selectedValue={this.state.distributionType}\n                inline={true}\n                className={\"radio-chips\"}\n              >\n                {[{name: \"evenly\", value: 'even'}, {name: \"by percent\", value: 'percent'}].map(({name, value}) => {\n                  const checked =\n                    value === this.state.distributionType;\n                  const classes = checked ? \"radio-chip checked\" : \"radio-chip\";\n                  return (\n                    <Radio\n                      key={value}\n                      label={name}\n                      value={value}\n                      className={classes}\n                    />\n                  );\n                })}\n              </RadioGroup>\n            </div>\n          </div>\n          <Divider />\n          <div className=\"form-section\">\n            <H2>Set Schedule</H2>\n            <div className=\"form-subsection\">\n              <span className=\"input-title\">Frequency</span>\n              <Checkbox\n                checked={!this.state.isSetSchedule}\n                label=\"No schedule (manually trigger)\"\n                onChange={this.handleIsSetScheduleChange}\n              />\n            </div>\n            {this.state.isSetSchedule && (\n              <div className=\"form-subsection\">\n                <span className=\"input-title\">Starting On</span>\n                <DateInput\n                  onChange={this.handleScheduleStartDateChange}\n                  timePrecision={TimePrecision.MINUTE}\n                  formatDate={date => date.toLocaleString()}\n                  parseDate={str => new Date(str)}\n                  minDate={new Date()}\n                  timePickerProps={{useAmPm: true}}\n                  placeholder={\"Select a date\"}\n                />\n              </div>\n            )}\n            {this.state.isSetSchedule && (\n              <div>\n                <div className=\"form-subsection\">\n                  <Checkbox\n                    checked={this.state.isRecurring}\n                    label=\"Run Every\"\n                    onChange={this.handleIsRecurringChange}\n                    inline={true}\n                  />\n                  {this.state.isRecurring && (\n                    <ControlGroup>\n                      <NumericInput\n                        min={1}\n                        max={this.getScheduleFrequencyMax()}\n                        onValueChange={this.handleScheduleFrequencyChange}\n                        clampValueOnBlur={true}\n                        buttonPosition=\"none\"\n                      />\n                      <ScheduleIntervalSelect\n                        items={[\n                          { name: \"day(s)\", value: \"day\" },\n                          { name: \"week(s)\", value: \"week\" },\n                          { name: \"month(s)\", value: \"month\" }\n                        ]}\n                        itemRenderer={renderSavedSearch}\n                        onItemSelect={({ value }) =>\n                          this.handleScheduleIntervalChange(value)\n                        }\n                      >\n                        <Button\n                          text={\n                            this.state.scheduleInterval\n                              ? `${this.state.scheduleInterval}(s)`\n                              : \"Select time interval\"\n                          }\n                          rightIcon=\"double-caret-vertical\"\n                          minimal={true}\n                          className={\"dropdown-select-btn\"}\n                        />\n                      </ScheduleIntervalSelect>\n                    </ControlGroup>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\n\nimport './App.css';\n\nimport { Navigation } from \"./Navbar/Navigation\";\nimport { FormGroupExample } from \"./Form/Form\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <div className=\"section\">\n        <FormGroupExample />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}